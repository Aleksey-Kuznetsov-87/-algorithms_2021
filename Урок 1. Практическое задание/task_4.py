"""
Задание 4.

Для этой задачи:
1) придумайте 2-3 решения (не менее двух)
2) оцените сложность каждого решения в нотации О-большое
3) сделайте вывод, какое решение эффективнее и почему

Примечание:
Без выполнения пунктов 2 и 3 задание считается нерешенным. Пункты 2 и 3 можно выполнить
через строки документации в самом коде.
Если у вас возникают сложности, постарайтесь подумать как можно решить задачу,
а не писать "мы это не проходили)".
Алгоритмизатор должен развивать мышление, а это прежде всего практика.
А без столкновения со сложностями его не развить.

Сама задача:
Пользователи веб-ресурса проходят аутентификацию.
В системе хранятся логин, пароль и отметка об активации учетной записи.

Нужно реализовать проверку, может ли пользователь быть допущен к ресурсу.
При этом его учетка должна быть активирована.
А если нет, то польз-лю нужно предложить ее пройти.

Приложение должно давать ответы на эти вопросы и быть реализовано в виде функции.
Для реализации хранилища можно применить любой подход,
который вы придумаете, например, реализовать словарь.
"""

lst = {'login_1': 'Иван', 'password_1': '123', 'account_activation_1': 'n',
       'login_2': 'Мария', 'password_2': '456', 'account_activation_2': 'y',
       'login_3': 'Роман', 'password_3': '523', 'account_activation_3': 'y'}


def through_the_cycle(dictionary):

    a = 0    # O(1) - константная
    for i in dictionary:    # O(n) - линейная
        a = a + 1    # O(len(s)) + O(len(t)) - линейная
        if dictionary[i] == 'n':    # O(n) - линейная
            var = dictionary[list(dictionary.keys())[a-3]]    # O(n) - линейная
            print('Вак аккуант не активирован', ', ', var, '. ',
                  'Вы не имеете права доступа к ресурсу без активации аккуанта.', sep='')


def key_search(dictionary):
    xx = 0    # O(1) - константная
    while xx < (len(dictionary)/3):    # O(n) - линейная
        xx = xx + 1    # O(len(s)) + O(len(t)) - линейная
        ac_c = 'account_activation_' + str(xx)    # O(len(s)) + O(len(t)) - линейная
        b = dictionary[ac_c]    # O(1) - константная
        if b == 'n':    # O(n) - линейная
            cc = 'login_' + str(xx)    # O(len(s)) + O(len(t)) - линейная
            print('Ваш аккуант не активирован', ', ', dictionary[cc], '. ',
                  'Вы не имеете права доступа к ресурсу без активации аккуанта.', sep='')


def dictionary_search(dictionary):
    acb = int(round((len(dictionary)/3)))    # O(n) - линейная - 3n
    for i in range(1, acb + 1):    # O(n) - линейная
        ac_c = 'account_activation_' + str(i)    # O(len(s)) + O(len(t)) - линейная
        if dictionary.get(ac_c, 0) == 'n':    # O(n) - линейная
            cc = 'login_' + str(i)    # O(len(s)) + O(len(t)) - линейная
            print('Ваш аккуант не активирован', ', ', dictionary[cc], '. ',
                  'Вы не имеете права доступа к ресурсу без активации аккуанта.', sep='')


through_the_cycle(lst)
key_search(lst)
dictionary_search(lst)

"""если всё правильно понял, то первый вариант будет самым быстрым, так как
линейная сложность и её количество минимальны"""