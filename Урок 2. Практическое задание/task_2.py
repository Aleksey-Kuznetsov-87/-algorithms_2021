"""
2.	Посчитать четные и нечетные цифры введенного натурального числа.
Например, если введено число 34560, то у него 3 четные цифры
(4, 6 и 0) и 2 нечетные (3 и 5).

Подсказка:
На каждом шаге вам нужно 'доставать' из числа очередную цифру
и смотреть является ли она четной или нечетной. При этом увеличиваем соответствующий счетчик
Пока все числа не извлечены рекурсивные вызовы продолжаем
Условие завершения рекурсии - все числа извлечены

Используем операции % //, НЕ ИСПОЛЬЗУЕМ ОПЕРАЦИИ ВЗЯТИЯ ЭЛЕМЕНТА ПО ИНДЕКСУ

Решите через рекурсию. Решение через цикл не принимается.
Для оценки Отлично в этом блоке необходимо выполнить 5 заданий из 7

Пример:
Введите число: 123
Количество четных и нечетных цифр в числе равно: (1, 2)
"""

count_numbers = int(input("Введите число "))


def counting_numbers(numbers, even_number, odd_number):
    if numbers == 0:
        print("Вычисление закончено")
    else:
        if ((numbers % 10) % 2) == 0:    # чётный числа
            even_number += 1
        elif ((numbers % 10) % 2) == 1:    # нечётные числа
            odd_number += + 1
        return counting_numbers((numbers // 10), even_number, odd_number)
    print("Чётный чисел: ", even_number, ". ", "Нечётных чисел: ", odd_number, ".", sep='')


if __name__ == '__main__':
    counting_numbers(count_numbers, 0, 0)
